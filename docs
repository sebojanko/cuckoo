bioinfo docs


Opisati zadani algoritam/problem

Zadatak je bio implementirati Cuckoo filter i testirati njegove performanse
(vrijeme izvođenja, zauzeće memorije) pomoću k-mera različitih duljina.
Te je performanse trebalo usporediti s već postojećom implementacijom filtra.

Cuckoo filter je struktura podataka slična Bloom filtru s razlikom da se iz Cuckoo filtra
elementi mogu brisati.
Iz ove strukture podataka nije moguće izvlačiti elemente već samo provjeriti,
s određenom sigurnošću, sadrži li određeni element.
Filter se sastoji od tablice koja sadrži otiske (fingerprint) elemenata.
Kako bi dobili otisak, potrebno je element provuć kroz hash funkciju te iz rezultata
izvuć određeni broj bitova. Ti se bitovi unose u filter.
Pretpostavimo li da se rezultati hash funkcija ne preklapaju za različite ulazne elemente,
ovisno o količini bitova koje ćemo izolirati za otisak elemenata, postoji mogućnost da se oni
preklapaju. Zbog toga se javljaju lažno pozitivni rezultati.

Kako se iz Cuckoo filtra mogu brisati elementi, ta je struktura podataka mnogo brža za
rad u situacijama kada nam je to važno od Bloom filtra kod kojeg se cijela struktura mora ponovno
sagraditi kada želimo izbaciti neki element.


Za testiranje performansi bilo je potrebno testirati filter s k-merama različitih duljina.
Kako je postojeća implementacija podržavala samo cjelobrojni tip podataka, a k-mere su nizovi
znakova, bilo je potrebno osmisliti enkoder znakova u cjelobrojni tip podataka.
***CIZL OPISI MALO***


Primjer






Zaključak

Ako pogledamo izvorni kod postojeće implementacije filtra, možemo vidjeti vrlo visoku razinu
optimizacije koda pa ne čudi da je naša implementacija za red veličine sporija.
Također, kako enkoder radi samo za kmere veličine 20 i manje, 50-mere, 100-mere i 200-mere
se obrađuju kao stringovi, što je sporije od baratanja s integerima.



Prosječno zauzeće memorije:
	k 		broj k-mera 	tablica 	hash 	vrijeme (sec)
	***MARK***


Brzina unosa:
	k 		broj k-mera 	tablica 	hash 	vrijeme (sec)
	10		50k				single		TIMS	0.0078
	10		50k				single		MD5		0.0284
	10		50k				single		SHA1	0.0280
	10		1M				single		TIMS	
	10		1M				single		MD5		
	10		1M				single		SHA1	
	20		1M				single		TIMS	0.41
	20		1M				single		MD5		0.88
	20		1M				single		SHA1	0.86
	50		1M				single		TIMS	0.57
	50		1M				single		MD5 	0.78
	50		1M				single		SHA1 	0.75
	100		1M				single		TIMS 	0.58
	100		1M				single		MD5 	0.87
	100		1M				single		SHA1 	0.83
	200		1M				single		TIMS 	0.59
	200		1M				single		MD5 	1.03
	200		1M				single		SHA1  	1.12
	10		50k				compact		TIMS	
	10		50k				compact		MD5		
	10		50k				compact		SHA1	
	20		1M				compact		TIMS	
	20		1M				compact		MD5		
	20		1M				compact		SHA1	
	50		1M				compact		TIMS
	50		1M				compact		MD5
	50		1M				compact		SHA1
	100		1M				compact		TIMS
	100		1M				compact		MD5
	100		1M				compact		SHA1
	200		1M				compact		TIMS
	200		1M				compact		MD5
	200		1M				compact		SHA1

Brzina provjere uspješnog unosa elemenata:
	k 		broj k-mera 	tablica 	hash 	vrijeme (sec)
	10		50k				single		TIMS	0.0022
	10		50k				single		MD5		0.0135
	10		50k				single		SHA1	0.0138
	20 		1M				single	 	TIMS	0.13
	20 		1M				single	 	MD5		0.51
	20		1M				single		SHA1 	0.45
	50		1M				single		TIMS	0.39
	50		1M				single		MD5 	0.39
	50		1M				single		SHA1 	0.85
	100		1M				single		TIMS 	0.38
	100		1M				single		MD5 	0.45
	100		1M				single		SHA1 	0.44
	200		1M				single		TIMS 	0.41
	200		1M				single		MD5 	0.75
	200		1M				single		SHA1 	0.58
	10		50k				compact		TIMS	
	10		50k				compact		MD5		
	10		50k				compact		SHA1	
	20 		1M				compact	 	TIMS	
	20 		1M				compact	 	MD5		
	20		1M				compact		SHA1 	
	50		1M				compact		TIMS
	50		1M				compact		MD5
	50		1M				compact		SHA1
	100		1M				compact		TIMS
	100		1M				compact		MD5
	100		1M				compact		SHA1
	200		1M				compact		TIMS
	200		1M				compact		MD5
	200		1M				compact		SHA1

Postotak lažno pozitivnih elemenata:
	k 		broj 		broj 			tablica 	hash 	false positives (%)
			unesenih	nepostojecih
			k-mera		k-mera
	10		50k			5k				single		TIMS	
	10		50k			5k				single		MD5		
	10		50k			5k				single		SHA1	
	20		1M			500k			single		TIMS 	
	20		1M			500k			single		MD5 	
	20		1M			500k			single		SHA1 	
	50		1M			500k			single		TIMS	
	50		1M			500k			single		MD5		
	50		1M			500k			single		SHA1		
	100		1M			500k			single		TIMS	
	100		1M			500k			single		MD5		
	100		1M			500k			single		SHA1		
	200		1M			500k			single		TIMS	
	200		1M			500k			single		MD5		
	200		1M			500k			single		SHA1		
	10		50k			5k				compact		TIMS	
	10		50k			5k				compact		MD5		
	10		50k			5k				compact		SHA1	
	20		1M			500k			compact		TIMS 	
	20		1M			500k			compact		MD5 	
	20		1M			500k			compact		SHA1 	
	50		1M			500k			compact		TIMS	
	50		1M			500k			compact		MD5		
	50		1M			500k			compact		SHA1		
	100		1M			500k			compact		TIMS	
	100		1M			500k			compact		MD5		
	100		1M			500k			compact		SHA1		
	200		1M			500k			compact		TIMS	
	200		1M			500k			compact		MD5		
	200		1M			500k			compact		SHA1		

Brisanje svih elemenata iz tablice:
	k 		broj k-mera 	tablica 	hash 	vrijeme (sec)
	10		50k				single		TIMS	0.0060
	10		50k				single		MD5		0.0169
	10		50k				single		SHA1	0.0173
	20		1M				single		TIMS 	0.33
	20		1M				single		MD5 	0.59
	20		1M				single		SHA1 	0.56
	50		1M				single		TIMS
	50		1M				single		MD5
	50		1M				single		SHA1
	100		1M				single		TIMS
	100		1M				single		MD5
	100		1M				single		SHA1
	200		1M				single		TIMS
	200		1M				single		MD5
	200		1M				single		SHA1
	10		50k				compact		TIMS	
	10		50k				compact		MD5		
	10		50k				compact		SHA1	
	20		1M				compact		TIMS 	
	20		1M				compact		MD5 	
	20		1M				compact		SHA1 	
	50		1M				compact		TIMS
	50		1M				compact		MD5
	50		1M				compact		SHA1
	100		1M				compact		TIMS
	100		1M				compact		MD5
	100		1M				compact		SHA1
	200		1M				compact		TIMS
	200		1M				compact		MD5
	200		1M				compact		SHA1
